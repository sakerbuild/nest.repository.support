global(VERSION_nest.repository.support) = "0.8.1"

static(VERSION_saker.build) = nest.dependency.resolve(
	saker.build,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]
static(VERSION_saker.nest) = nest.dependency.resolve(
	saker.nest,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]

compile(
	out javac,
) {
	$javac = saker.java.compile(
		SourceDirectories: [
			api/src/main/,
			main/src/main/,
			impl/src/main/,
		],
		ClassPath: [
			saker.java.classpath.bundle([
				"saker.build-api-v{ static(VERSION_saker.build) }",
				"saker.nest-api-v{ static(VERSION_saker.nest) }"
			]),
		],
		Identifier: nest.repository.support,
	)
}
export(
	in compile = include(compile),
	out compile,
	
	out mainjar,
	out apijar,
	out impljar,
	out sourcejar,
	
	out bundlepaths = [
		$mainjar[Path],
		$apijar[Path],
		$impljar[Path],
		$sourcejar[Path],
	]
) {
	$mainjar = saker.jar.create(
		Output: nest.repository.support.jar,
		Resources: [
			{
				Directory: main/resources/,
				Resources: **,
			},
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/nest/support/main/**,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "nest.repository.support-v{ global(VERSION_nest.repository.support) }",
				Nest-Bundle-Source: "nest.repository.support-sources-v{ global(VERSION_nest.repository.support) }"
			},
		},
	)
	$apijar = saker.jar.create(
		Output: nest.repository.support-api.jar,
		Resources: [
			{
				Directory: api/resources/,
				Resources: **,
			},
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/nest/support/api/**,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "nest.repository.support-api-v{ global(VERSION_nest.repository.support) }",
				Nest-Bundle-Source: "nest.repository.support-sources-v{ global(VERSION_nest.repository.support) }"
			},
		},
	)
	$impljar = saker.jar.create(
		Output: nest.repository.support-impl.jar,
		Resources: [
			{
				Directory: impl/resources/,
				Resources: **,
			},
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/nest/support/impl/**,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "nest.repository.support-impl-v{ global(VERSION_nest.repository.support) }",
				Nest-Bundle-Source: "nest.repository.support-sources-v{ global(VERSION_nest.repository.support) }"
			},
		},
	)
	$sourcejar = saker.jar.create(
		Output: nest.repository.support-sources.jar,
		Resources: [
			{
				Directory: [
					main/src/main/,
					api/src/main/,
					impl/src/main/,
				],
				Resources: **/*.java,
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			}
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "nest.repository.support-sources-v{ global(VERSION_nest.repository.support) }",
			},
		},
	)
}
install() {
	$export = include(export)
	nest.local.install(Bundle: $export[bundlepaths])
}
upload(){
	$export = include(export, Path: saker.build)
	include(Path: secret/secrets.build)
	nest.server.upload(
		Bundles: $export[bundlepaths],
		APIKey: global(nest.repository.support.UPLOAD_API_KEY),
		APISecret: global(nest.repository.support.UPLOAD_API_SECRET),
		Overwrite: true,
	)
}
test() {
	$export = include(export)
	
	$instrumentedjar = nest.test.instrument(
		nest.bundle.download("saker.build-test-v{ static(VERSION_saker.build) }")[BundlePaths][0],
		NestVersion: static(VERSION_saker.nest),
	)
	
	$testcompile = saker.java.compile(
		SourceDirectories: main/src/test/,
		ClassPath: [
			$instrumentedjar,
			saker.java.classpath.bundle([
				"saker.build-test-runner-v{ static(VERSION_saker.build) }",
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
				"saker.nest-test-utils-v{ static(VERSION_saker.nest )}"
			]),
		],
		Identifier: nest.repository.support.tests,
	)
	
	$test = saker.java.test(
		TestRunnerClassPath: [
			saker.java.classpath.bundle("saker.build-test-runner-v{ static(VERSION_saker.build) }"),
		],
		ClassPath: [
			$instrumentedjar
		],
		DependencyClassPath: [
			$export[compile][javac],
		],
		TestInvokerClass: testing.saker.SakerJavaTestingInvoker,
		TestClassPath:	[
			$testcompile[ClassDirectory],
			saker.java.classpath.bundle([
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
				"saker.nest-test-utils-v{ static(VERSION_saker.nest )}",
			]),
		],
		TestClasses: [
			**.*Test
		],
		NonDeterministicTests: [
			**,
		],
		TestClassParameters: {
			**: {
				RepositoryJarPath: nest.bundle.localize("saker.nest-test-v{ static(VERSION_saker.nest) }")[BundleLocalPaths][0],
				RepositoryParameterBundles: "{ 
						foreach $path in $export[bundlepaths]: "{ std.file.mirror($path) };" 
					};{ 
						nest.bundle.localize("saker.nest-test-instrumentation-v{ static(VERSION_saker.nest) }")[BundleLocalPaths][0] 
					};{
						nest.bundle.localize("saker.build-v{ static(VERSION_saker.build) }")[BundleLocalPaths][0]
					}",
			}
		},
		TestInvokerParameters: {
			SakerJarPath: std.file.mirror($instrumentedjar),
			TimeoutMillis: 120000,
			TestsBaseBuildDirectory: std.file.mirror.path(std.file.place(test/build)),
		},
		IgnoreFileChanges: [
			std.file.place(test/build),
		],
		WorkingDirectory: main,
		MaxJVMCount: 1,
		FailFast: true,
		AbortOnFail: true,
		Verbose: true,
	)
}